name: Customers Backend API Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
#  compile:
#    runs-on: ubuntu-latest
#    name: Compile project
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: 'maven'
#          cache-dependency-path: './pom.xml'
#
#      - name: Compile project
#        run: mvn clean compile
#  unit-tests:
#    runs-on: ubuntu-latest
#    name: Unit tests
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: 'maven'
#          cache-dependency-path: './pom.xml'
#
#      - name: Running Unit Tests
#        run: ./mvnw clean test
#  build:
#    runs-on: ubuntu-latest
#    name: Build backend
#    #needs: [compile, unit-tests]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: 'maven'
#          cache-dependency-path: './pom.xml'
#
#      - name: Build project
#        run: ./mvnw -ntp -B clean package -DskipTests
  build-image:
    name: Build Docker image
    runs-on: ubuntu-latest
#    needs: [ build ]
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(mvn -q \
            -Dexec.executable="echo" \
            -Dexec.args='${project.version}' \
            --non-recursive exec:exec | tr -d '\n')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/customers:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/customers:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}